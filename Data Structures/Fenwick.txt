// First Implementation 

int bit[N] ; 

I init(){
	// offline initializaion in O(N)
	for(int i = 1 ;i <= n;i++){
		bit[i] += a[i] ; 
		int nxt = i + (i & - i) ; 
		if(nxt < N)
			bit[nxt] += bit[i] ;
	}
}

I add(int x , int v){
	//for(;x<N;x+=x&-x)
	for(;x<N;x = x|(x + 1) )
		bit[x] += v ; 
}

int upto(int x){
	int ret = 0 ; 
	//for(;x;x-=x&-x)
		for(;~x;x = (x&(x+1)) - 1)
			ret+= bit[x] ; 
	return ret ; 
}

int get(int l , int r){
	return upto(r) - upto(l -1) ; 
}

int lower_bound(int x){
	int sum = 0 ; 
	int cur = 0 ; 
	for(int i = 20 ; ~ i ;i -- ){
		if(cur + (1<<i) >= N)
			continue ;
		if(sum + bit[cur + (1<<i)] < x ){
			sum += bit[cur + (1<<i)] ; 
			cur += (1<<i) ;
		}
	}

	return cur + 1; 
}


// Second Implementation 

template<class T, int sz = N> 
struct fenwick
{
       T bit[sz] ; 
       void clear(){memset(bit , 0 , sizeof bit) ; }
       fenwick(){clear() ;}
       void add(int x, T v){for (; x < sz; x += x & -x)bit[x] += v;}
       long long upto(int x){T ret = 0;for (;x ; x -= x & -x) ret += bit[x] ;return ret;}
       inline T get(int l, int r) { return upto(r) - upto(l - 1); }
};
