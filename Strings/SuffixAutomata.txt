struct SuffixAutomata
{
        struct state{int size = 0, link = -1;bool term = 0;map<int, int> to;};
        vector<state> st;
        int size = 0, last = 0;
        void extend(int x)
        {
                int cur = size++, p = last;
                st[cur].size = st[last].size + 1;
                while (p != -1 && !st[p].to.count(x))st[p].to[x] = cur, p = st[p].link;
                if (p == -1)st[cur].link = 0;
                else
                {
                        int q = st[p].to[x];
                        if (st[p].size + 1 == st[q].size)st[cur].link = q;
                        else
                        {
                                int clone = size++;
                                st[clone] = st[q], st[clone].size = st[p].size + 1;
                                while (p != -1 && st[p].to[x] == q)st[p].to[x] = clone, p = st[p].link;
                                st[cur].link = st[q].link = clone;
                        }
                }
                last = cur;
        }
        SuffixAutomata(string &s)
        {
                st = vector<state>((int) s.size() * 2, state()), ++size;
                for (auto u : s)extend(u);
                for (int i = last; ~i; i = st[i].link)st[i].term = 1;
        }
};
