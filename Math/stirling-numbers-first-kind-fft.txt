
int bpw(int a, int b)
{
       if (!b)
              return 1;
       int x = bpw(a, b / 2);

       x = 1LL * x * x % mod;
       if (b & 1)
              x = 1LL * x * a % mod;

       return x;
}

void rev(vector<int> &a)
{
       int N = a.size(), maxb = __builtin_ctz(N);
       for (int i = 0; i < N; i++)
       {
              int k = 0;
              for (int j = 0; j < maxb; j++)
                     if ((i >> j) & 1)
                            k |= (1 << (maxb - 1 - j));

              if (i < k)
                     swap(a[i], a[k]);
       }
}

void mul(vector<int> &a, int val)
{
       int N = a.size();
       assert((N & (-N)) == N);
       rev(a);

       for (int len = 2; len <= N; len *= 2)
       {
              int wn = bpw(3, (mod - 1) / len);
              if (val == -1)
                     wn = bpw(wn, mod - 2);
              for (int i = 0; i < N; i += len)
              {
                     int nxt = len / 2, pw = 1;
                     for (int j = 0; j < nxt; j++)
                     {
                            int x = a[i + j], y = a[i + j + nxt];
                            a[i + j] = (x + 1LL * pw * y) % mod;
                            a[i + j + nxt] = (x - 1LL * pw * y % mod + mod) % mod;
                            pw = 1LL * pw * wn % mod;
                     }
              }
       }

       if (val == -1)
       {
              int inv = bpw(N, mod - 2);
              for (int i = 0; i < N; i++)
                     a[i] = 1LL * a[i] * inv % mod;
       }
}

vector<int> operator*(vector<int> a, vector<int> b)
{
       if (a.size() < b.size())
              a.swap(b);

       int N = 1;
       while (N <= (int)a.size())
              N *= 2;

       a.resize(N), b.resize(N);
       mul(a, 1), mul(b, 1);
       for (int i = 0; i < N; i++)
              a[i] = 1LL * a[i] * b[i] % mod;
       mul(a, -1);

       return a;
}

vector<int> v[N];

int S(int n, int r)
{

       int nn = 1;
       while (nn < n)
              nn <<= 1;

       for (int i = 0; i < n; ++i)
       {
              v[i].push_back(i);
              v[i].push_back(1);
       }
       for (int i = n; i < nn; ++i)
       {
              v[i].push_back(1);
       }

       for (int j = nn; j > 1; j >>= 1)
       {
              int hn = j >> 1;
              for (int i = 0; i < hn; ++i)
              {
                     v[i] = v[i] * v[i + hn];
              }
       }

       return v[0][r];
}
