/*
        Problem Name : bartender
        Problem Link : https://szkopul.edu.pl/c/ioi-2020-training/p/bar1/
        Score : 80
        Complexity : O(N * log^2(N) )
*/
#include<bits/stdc++.h>

/*
#pragma GCC optimize("-Ofast")
//#pragma GCC optimize("trapv")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,sse4.2,popcnt,abm,mmx,avx2,tune=native")
#pragma GCC optimize("-ffast-math")
#pragma GCC optimize("-funroll-loops")*/

#define I inline void 
#define S struct 
#define vi vector<int> 
#define vii vector<pair<int,int>>

using namespace std ; 
using ll = long long ; 
using ld = long double ; 

const int N = 1e6 + 7 , mod = 1e9 + 7 ; 
const int inf = N ; 
// How interesting!

int n ; 
vector<int> a;

int mask[N];
int pos[N]; 
string s; 

int fs[N] ; 
int os , zs;
int bit[2][N];

I add(int ix , int x, int d = 0){
        x++;
        for(;x<N;x+=x&-x)
                bit[ix][x]+=d; 
}

int lower(int ix,int x){
        int ret = 0 ; 
        int pos = 0 ; 
        for(int i = 20 ; ~i ; -- i){
                if(pos + (1<<i) >= N)
                        continue ;
                if(ret + bit[ix][pos + (1<<i)] < x ){
                        ret += bit[ix][pos + (1<<i)] ; 
                        pos += (1<<i) ; 
                }
        }
        return pos; 
}

int solve(int pos){
        int osc = (pos ? fs[pos-1] : 0) ; 
        int czs = (pos - osc) ; 
        
        if(osc>= os || czs >= zs )
                return 1; 
        return lower(1 , osc + 1) > lower(0 , zs - czs) ? 1 : inf ;
}

I init(){
        memset(bit , 0 , sizeof bit) ; 
        os = zs = 0 ;
}

int get(int x){
        init() ; 
        for(int i = 0 ;i < n ;i++){
                mask[i] = 1 ; 
                add(1, i, 1) ;
                os++ ;
        }
        int ret = 0 ; 
        for(int i = 1; i<= n ;i++){
                mask[pos[i]] = 0; 
                add(0 , pos[i] , 1) ; 
                add(1 , pos[i] , -1) ; 
                os--;zs++;
                ret = max(ret , solve(x)) ; 
        }
        return ret < inf; 
}

int main(){
  
        ios_base::sync_with_stdio(0) ; 
        cin.tie(0) ;
        //freopen("in.in" , "r" , stdin) ; 
        cin >> n ; 
        for(int i = 0 ;i < n; i++){
                int x ;
                cin >> x ; 
                a.push_back(x) ;
                pos[x] = i ;
        }

        cin >> s ; 
        if(s == string(n , 'F')){
                int ans = 0 ;
                for(int i = 0 ; i < n ;i ++)
                        ans = max(ans , i + 1 -a[i] ) ;
                cout<< ans ; 
                return 0;
        }
        fs[0] = (s[0]== 'F') ;
        int sz = (int) s.size() ;

        for(int i = 1;i < sz ; i++){
                fs[i] = fs[i-1] + (s[i] == 'F') ;
        }

        int ans = inf;

        int l = 0 , r = sz; 
        while(l <= r){
                int mid = (l + r) >> 1; 
                if(get(mid)){
                        ans = mid ; 
                        r = mid - 1; 
                }
                else 
                        l = mid + 1; 
        }

        cout<< ans; 
        return 0 ; 
}
