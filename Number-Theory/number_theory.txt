namespace number_theory{

       const int mod1 = 1e9 + 7 ;
       const int mod2 = 998244353 ; 

       vector<long long> fact ;

       template<typename T>
       T normalize(T a, T m){
              a = a%m ; 
              if(a<0)a+=m;
              return a ; 
       }

       template<typename T> 
       T Add(T x, T y, T MOD = mod1){
              T ret = (x + y) ; 
              (ret>=MOD)&&(ret-=MOD) ; 
              (ret<0)&&(ret+=MOD) ; 
              return ret ;   
       }

       template<typename T>
       void Add_inplace(T &x, T y, T MOD = mod1){
              x = Add(x, y, MOD) ; 
       }       

       template<typename T>
       T Mul(T x, T y, bool inplace = false, T MOD = mod1){
              T ret = (T) 1ll * x * y % MOD; 
              if(inplace)x = ret ; 
              return ret ;   
       }       

       template<typename T> 
       void Mul_inplace(T &x, T y, T MOD = mod1){
              x = Mul(x, y, MOD) ; 
       }   

       bool is_prime(long long x){
              if(x<=1)return false ; 
              if(x<=3)return true ; 

              if(x%2 == 0 || x % 3 == 0)
                     return false ; 

              for(long long i = 5; 1ll*i*i<=x ; i+=6){
                     if( x%i == 0 || x%(i+2) == 0 )
                            return false ; 
              }

              return true ; 
       }

       template<typename T> 
       T faspow(T x, T y, T MOD = mod1){
              T ret = T(1) ; 
              while(y){
                     (y&1) && (Mul(ret, x, true, MOD)) ; 
                     Mul(x, x, true, MOD) ; 
                     y >>= 1ll ; 
              }
              return ret ; 
       }

       void generate_factorials(int _n){
                     fact.push_back(1) ; 
              for(int i = 1;i <= n ;++ i){
                     fact.push_back(Mul(fact.back(), 1ll * i)) ; 
              }
              return ; 
              if(fact.size() > _n)return ; 
              if(fact.size() == 0){
                     fact = {1} ; 
              }
              const int z = fact.size() ; 
              fact.resize(_n + 1) ; 
              for(int i = z;i <= _n ; ++ i){
                     fact[i] = Mul(fact[i-1], 1ll *i) ; 
              }
       }

       template <typename T>
       T inverse(T a, T m) {
              T u = 0, v = 1;
              T MOD = m ; 
              while (a != 0) {
                     T t = m / a;
                     m -= t * a; swap(a, m);
                     u -= t * v; swap(u, v);
              }

              assert(m == 1);
              return normalize(u, MOD);
       }

       template<typename T> 
       T ncr(T x, T y, T MOD = mod1){
              if(x<y)return T(0); 
              return Mul( fact[x], Mul( inverse(fact[y], T(MOD) ) , inverse(fact[x-y], T(MOD) ) ) ) ; 
       }
}

using namespace number_theory ;
