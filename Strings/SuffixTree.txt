struct SuffixTree
{
        const int oo = 1e9;
        string s;
        vector<map<int, int>> to;
        vector<int> len, fpos, link, st, en, vec, dep;
        int node = 0, pos = 0, dfs_time = 0;
        int sz = 1, z = 0;
        void resize(int aux)
        {
                to.resize(2 * aux);
                len.resize(2 * aux);
                link.resize(2 * aux);
                fpos.resize(2 * aux);
                st.resize(4 * aux);
                en.resize(4 * aux);
                vec.resize(4 * aux);
                dep.resize(2 * aux);
        }
        pair<int, int> follow(string &str)
        {
                int cur = 0;
                int i = 0;
                for (auto u : str)
                {
                        if (cur == 0 || i == len[cur])
                                cur = to[cur][u], i = 0;

                        if (!cur || u != s[fpos[cur] + i++])
                                return {0, 0};
                }
                return {cur, i};
        }
        int make_node(int _pos, int _len)
        {
                fpos[sz] = _pos;
                len[sz] = _len;
                return sz++;
        }
        void go_edge()
        {
                while (pos > len[to[node][s[z - pos]]])
                {
                        node = to[node][s[z - pos]];
                        pos -= len[node];
                }
        }
        void add_letter(int c)
        {
                s += char(c), ++z;
                resize(z);
                pos++;
                int last = 0;
                while (pos > 0)
                {
                        go_edge();
                        int edge = s[z - pos];
                        int &v = to[node][edge];
                        int t = s[fpos[v] + pos - 1];
                        if (v == 0)
                        {
                                v = make_node(z - pos, oo);
                                link[last] = node;
                                last = 0;
                        }
                        else if (t == c)
                                return void(link[last] = node);
                        else
                        {
                                int u = make_node(fpos[v], pos - 1);
                                to[u][c] = make_node(z - 1, oo);
                                to[u][t] = v;
                                fpos[v] += pos - 1;
                                len[v] -= pos - 1;
                                v = link[last] = u;
                                last = u;
                        }
                        if (node == 0)
                                pos--;
                        else
                                node = link[node];
                }
        }
        void add_string(string str)
        {
                for (auto u : str)
                        add_letter(u);
        }
        SuffixTree(string str)
        {
                resize(1);
                len[0] = oo;
                if (sz(str))
                        add_string(str);
        }
        bool check(string x) { return !!follow(x).f; }

        void dfs(int cur)
        {
                st[cur] = ++dfs_time;
                if (len[cur] > z)
                        vec[dfs_time] = cur;
                for (auto u : to[cur])
                {
                        if (cur)
                                dep[u.s] = dep[cur] + len[cur];
                        dfs(u.s);
                }
                en[cur] = ++dfs_time;
        }

        vector<int> get_occs(string str)
        {
                pair<int, int> pos = follow(str);
                int de = dep[pos.f] + pos.s - (int)str.size();
                if (pos.f)
                {
                        vector<int> ret;
                        for (int j = st[pos.f]; j <= en[pos.f]; ++j)
                        {
                                if (vec[j])
                                {
                                        ret.push_back(de + fpos[vec[j]] - dep[vec[j]] - 1);
                                }
                        }
                        return ret;
                }
                else
                        return {};
        }
};
