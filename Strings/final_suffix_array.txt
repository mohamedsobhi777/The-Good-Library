struct SuffixArray
{
       vector<int> sa, lcp, makan, S;
       vector<int> lg;
       vector<vector<int>> table;
       SuffixArray() {}
       void extend(int x) { S.push_back(x); }
       void work()
       {
              sa = suffix_array(S);
              lcp = lcp_array(sa, S);
              makan.resize((int)sa.size());
              for (int i = 0; i < (int)sa.size(); ++i)
                     makan[sa[i]] = i;
       }

       vector<int> suffix_array(vector<int> S)
       {
              int sz = S.size();
              vector<int> sa(sz), classes(sz);
              for (int i = 0; i < sz; i++)
              {
                     sa[i] = sz - 1 - i;
                     classes[i] = S[i];
              }
              stable_sort(sa.begin(), sa.end(), [&S](int i, int j) {
                     return S[i] < S[j];
              });
              for (int len = 1; len < sz; len *= 2)
              {
                     vector<int> c(classes);
                     for (int i = 0; i < sz; i++)
                     {
                            bool same = i && sa[i - 1] + len < sz && c[sa[i]] == c[sa[i - 1]] && c[sa[i] + len / 2] == c[sa[i - 1] + len / 2];
                            classes[sa[i]] = same ? classes[sa[i - 1]] : i;
                     }
                     vector<int> cnt(sz), s(sa);
                     for (int i = 0; i < sz; i++)
                            cnt[i] = i;
                     for (int i = 0; i < sz; i++)
                     {
                            int s1 = s[i] - len;
                            if (s1 >= 0)
                                   sa[cnt[classes[s1]]++] = s1;
                     }
              }
              return sa;
       }
       vector<int> lcp_array(const vector<int> &sa, vector<int> S)
       {
              int sz = S.size(), pre = 0;
              vector<int> rank(sz), lcp(sz - 1);
              for (int i = 0; i < sz; i++)
                     rank[sa[i]] = i;
              for (int i = 0; i < sz; i++)
              {
                     if (rank[i] < sz - 1)
                     {
                            int j = sa[rank[i] + 1];
                            while (max(i, j) + pre < S.size() && S[i + pre] == S[j + pre])
                                   ++pre;
                            lcp[rank[i]] = pre;
                            if (pre > 0)
                                   --pre;
                     }
              }
              return lcp;
       }
       vector<int> substr(int l, int c)
       {
              vector<int> ret;
              for (int i = l; i < l + c; ++i)
              {
                     if (i < S.size())
                            ret.push_back(S[i]);
              }
              return ret;
       }

       void process_rmq()
       {
              lg = vector<int>(sa.size() + 1, 0);
              for (int i = 2; i <= sa.size(); ++i)
                     lg[i] = lg[i / 2] + 1;
              table.resize(lg[sa.size()] + 1);

              for (int i = 0; i < table.size(); ++i)
                     table[i] = vector<int>(sa.size() + 1, 0);
              for (int i = 0; i + 1 < sa.size(); ++i)
                     table[0][i] = lcp[i];
              for (int j = 1; j < table.size(); ++j)
                     for (int i = 0; i <= table[j].size() - (1 << j) - 1; ++i)
                            table[j][i] = min(table[j - 1][i], table[j - 1][i + (1 << (j - 1))]);
       }

       int LCPQ(int x, int y)
       {
              if (x > y)
                     swap(x, y);
              int g = lg[y - x + 1];
              return min(table[g][x], table[g][y - (1 << g) + 1]);
       }

       bool less(pair<int, int> p, pair<int, int> q)
       {
              int p1 = makan[p.first], p2 = makan[q.first];
              if (p1 > p2)
                     swap(p1, p2);
              int qr = LCPQ(p1, p2 - 1);
              int mn = min(p.second - p.first + 1, q.second - q.first + 1);
              if (qr < mn && p.first != q.first)
                     return S[p.first + qr] < S[q.first + qr];
              else
                     return p.second - p.first < q.second - q.first;
       }
       int equal(pair<int, int> p, pair<int, int> q)
       {
              if (p == q)
                     return 1;
              int p1 = makan[p.first], p2 = makan[q.first];
              if (p1 > p2)
                     swap(p1, p2);
              if (p.second - p.first != q.second - q.first)
                     return 0;
              return LCPQ(p1, p2 - 1) > p.second - p.first;
       }

       int in_array_bsearch(int lp = 0, int le = 0, int ri = 0)
       {
              int l = 0, r = (int)sa.size() - 1;
              int ret = -lp;
              int m = ri - le + 1;
              while (l <= r)
              {
                     int mid = (l + r) >> 1;
                     if (equal({le, ri}, {sa[mid], sa[mid] + m - 1}))
                            ret = mid, (lp ? l = mid + 1 : r = mid - 1);
                     else if (less({le, ri}, {sa[mid], sa[mid] + m - 1}) ? r = mid - 1 : l = mid + 1)
                            ;
              }
              return ret;
       }
       int in_array_count(int le, int ri) { return in_array_bsearch(1, le, ri) - in_array_bsearch(0, le, ri) + 1; }

       int bsearch(vector<int> x, int lp = 0)
       {
              int l = 0, r = (int)sa.size() - 1;
              int ret = -lp;
              int m = (int)x.size();
              while (l <= r)
              {
                     int mid = (l + r) >> 1;
                     vector<int> got = substr(sa[mid], m);
                     if (x == got)
                            ret = mid, (lp ? l = mid + 1 : r = mid - 1);
                     else if (x < got ? r = mid - 1 : l = mid + 1)
                            ;
              }
              return ret;
       }
       int lower_bound(vector<int> x) { return bsearch(x, 0); }
       int upper_bound(vector<int> x) { return 1 + bsearch(x, 1); }
       int count(vector<int> x) { return upper_bound(x) - lower_bound(x); }
};
