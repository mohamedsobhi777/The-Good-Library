
struct SuffixArray
{
        vector<int> sa, lcp;
        vector<int> makan;
        SuffixArray(vector<int> s = {})
        {
                if (s.size())
                        work(s);
        }

        void work(vector<int> s)
        {
                sa = suffix_array(s);
                lcp = lcp_array(sa, s);
                makan.resize((int)sa.size());
                for (int i = 0; i < (int)sa.size(); ++i)
                        makan[sa[i]] = i;
        }

        vector<int> suffix_array(vector<int> S)
        {
                int sz = S.size();
                vector<int> sa(sz), classes(sz);
                for (int i = 0; i < sz; i++)
                {
                        sa[i] = sz - 1 - i;
                        classes[i] = S[i];
                }
                stable_sort(sa.begin(), sa.end(), [&S](int i, int j) {
                        return S[i] < S[j];
                });
                for (int len = 1; len < sz; len *= 2)
                {
                        vector<int> c(classes);
                        for (int i = 0; i < sz; i++)
                        {
                                bool same = i && sa[i - 1] + len < sz && c[sa[i]] == c[sa[i - 1]] && c[sa[i] + len / 2] == c[sa[i - 1] + len / 2];
                                classes[sa[i]] = same ? classes[sa[i - 1]] : i;
                        }
                        vector<int> cnt(sz), s(sa);
                        for (int i = 0; i < sz; i++)
                                cnt[i] = i;
                        for (int i = 0; i < sz; i++)
                        {
                                int s1 = s[i] - len;
                                if (s1 >= 0)
                                        sa[cnt[classes[s1]]++] = s1;
                        }
                }
                return sa;
        }
        vector<int> lcp_array(const vector<int> &sa, vector<int> S)
        {
                int sz = S.size();
                vector<int> rank(sz), lcp(sz - 1);
                for (int i = 0; i < sz; i++)
                        rank[sa[i]] = i;

                int pre = 0;
                for (int i = 0; i < sz; i++)
                {
                        if (rank[i] < sz - 1)
                        {
                                int j = sa[rank[i] + 1];
                                while (max(i, j) + pre < S.size() && S[i + pre] == S[j + pre])
                                        ++pre;
                                lcp[rank[i]] = pre;
                                if (pre > 0)
                                        --pre;
                        }
                }
                return lcp;
        }
};
